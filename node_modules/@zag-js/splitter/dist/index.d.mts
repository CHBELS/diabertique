import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, DirectionProperty, CommonProperties, Required, PropTypes, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Service, EventObject, Machine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "panel" | "resizeTrigger">;

type PanelId = string | number;
interface PanelSizeData {
    id: PanelId;
    size?: number | undefined;
    minSize?: number | undefined;
    maxSize?: number | undefined;
}
interface SizeChangeDetails {
    size: PanelSizeData[];
    activeHandleId: string | null;
}
type ElementIds = Partial<{
    root: string;
    resizeTrigger(id: string): string;
    label(id: string): string;
    panel(id: string | number): string;
}>;
interface SplitterProps extends DirectionProperty, CommonProperties {
    /**
     * The orientation of the splitter. Can be `horizontal` or `vertical`
     * @default "horizontal"
     */
    orientation?: "horizontal" | "vertical" | undefined;
    /**
     * The controlled size data of the panels
     */
    size?: PanelSizeData[] | undefined;
    /**
     * The initial size of the panels when rendered.
     * Use when you don't need to control the size of the panels.
     */
    defaultSize?: PanelSizeData[] | undefined;
    /**
     * Function called when the splitter is resized.
     */
    onSizeChange?: ((details: SizeChangeDetails) => void) | undefined;
    /**
     * Function called when the splitter resize ends.
     */
    onSizeChangeEnd?: ((details: SizeChangeDetails) => void) | undefined;
    /**
     * The ids of the elements in the splitter. Useful for composition.
     */
    ids?: ElementIds | undefined;
}
type PropWithDefault = "orientation";
type NormalizedPanelData = Array<Required<PanelSizeData> & {
    remainingSize: number;
    minSize: number;
    maxSize: number;
    start: number;
    end: number;
}>;
type ComputedContext = Readonly<{
    isHorizontal: boolean;
    panels: NormalizedPanelData;
    activeResizeBounds?: {
        min: number;
        max: number;
    } | undefined;
    activeResizePanels?: {
        before: PanelSizeData;
        after: PanelSizeData;
    } | undefined;
}>;
interface ResizeState {
    isAtMin: boolean;
    isAtMax: boolean;
}
interface PrivateContext {
    activeResizeId: string | null;
    activeResizeState: ResizeState;
    size: PanelSizeData[];
}
interface Refs {
    previousPanels: NormalizedPanelData;
}
interface SplitterSchema {
    state: "idle" | "hover:temp" | "hover" | "dragging" | "focused";
    tag: "focus";
    props: RequiredBy<SplitterProps, PropWithDefault>;
    context: PrivateContext;
    refs: Refs;
    computed: ComputedContext;
    action: string;
    event: EventObject;
    effect: string;
    guard: string;
}
type SplitterService = Service<SplitterSchema>;
type SplitterMachine = Machine<SplitterSchema>;
interface PanelProps {
    id: PanelId;
    snapSize?: number | undefined;
}
interface ResizeTriggerProps {
    id: `${PanelId}:${PanelId}`;
    step?: number | undefined;
    disabled?: boolean | undefined;
}
interface ResizeTriggerState {
    disabled: boolean;
    focused: boolean;
    panelIds: string[];
    min: number | undefined;
    max: number | undefined;
    value: number;
}
interface PanelBounds {
    min: number;
    max: number;
}
interface SplitterApi<T extends PropTypes = PropTypes> {
    /**
     * Whether the splitter is focused.
     */
    focused: boolean;
    /**
     * Whether the splitter is being dragged.
     */
    dragging: boolean;
    /**
     *  The bounds of the currently dragged splitter handle.
     */
    bounds: PanelBounds | undefined;
    /**
     * Function to set a panel to its minimum size.
     */
    setToMinSize(id: PanelId): void;
    /**
     * Function to set a panel to its maximum size.
     */
    setToMaxSize(id: PanelId): void;
    /**
     * Function to set the size of a panel.
     */
    setSize(id: PanelId, size: number): void;
    /**
     * Function to set the size of multiple panels.
     */
    setSizes(sizes: PanelSizeData[]): void;
    /**
     * Returns the size of a panel.
     */
    getSize(id: PanelId): number;
    /**
     * Returns the state details for a resize trigger.
     */
    getResizeTriggerState(props: ResizeTriggerProps): ResizeTriggerState;
    getRootProps(): T["element"];
    getPanelProps(props: PanelProps): T["element"];
    getResizeTriggerProps(props: ResizeTriggerProps): T["element"];
}

declare function connect<T extends PropTypes>(service: SplitterService, normalize: NormalizeProps<T>): SplitterApi<T>;

declare const machine: _zag_js_core.Machine<SplitterSchema>;

declare const props: (keyof SplitterProps)[];
declare const splitProps: <Props extends Partial<SplitterProps>>(props: Props) => [Partial<SplitterProps>, Omit<Props, keyof SplitterProps>];
declare const panelProps: (keyof PanelProps)[];
declare const splitPanelProps: <Props extends PanelProps>(props: Props) => [PanelProps, Omit<Props, keyof PanelProps>];
declare const resizeTriggerProps: (keyof ResizeTriggerProps)[];
declare const splitResizeTriggerProps: <Props extends ResizeTriggerProps>(props: Props) => [ResizeTriggerProps, Omit<Props, keyof ResizeTriggerProps>];

export { type SplitterApi as Api, type SplitterMachine as Machine, type PanelProps, type PanelSizeData, type SplitterProps as Props, type ResizeTriggerProps, type SplitterService as Service, type SizeChangeDetails, anatomy, connect, machine, panelProps, props, resizeTriggerProps, splitPanelProps, splitProps, splitResizeTriggerProps };
